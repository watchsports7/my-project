import os
from django.db import models
from django.urls import reverse
from ckeditor_uploader.fields import RichTextUploadingField
from django.utils.text import slugify
from django.utils import timezone
from django.utils.html import strip_tags
from taggit.managers import TaggableManager


def safe_image_upload_to(instance, filename):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ /media/news/"""
    base, ext = os.path.splitext(filename)
    safe_name = slugify(base)
    return f"news/{safe_name}{ext}"


class Category(models.Model):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π (–§—É—Ç–±–æ–ª, –•–æ–∫–∫–µ–π, –î–µ–≤—É—à–∫–∏ –∏ —Ç.–¥.)"""
    title = models.CharField(max_length=100, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    slug = models.SlugField(unique=True, max_length=120, verbose_name="URL –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
    order = models.PositiveIntegerField(default=0, verbose_name="–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")

    class Meta:
        ordering = ['order']
        verbose_name = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
        verbose_name_plural = "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"

    def __str__(self):
        return self.title

    def save(self, *args, **kwargs):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è slug –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏."""
        if not self.slug:
            self.slug = slugify(self.title)
        super().save(*args, **kwargs)

    def get_absolute_url(self):
        """–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        return reverse('news:category_detail', kwargs={'slug': self.slug})


class Tag(models.Model):
    name = models.CharField(max_length=50, unique=True, verbose_name="–¢–µ–≥")
    slug = models.SlugField(max_length=50, unique=True)

    class Meta:
        verbose_name = "–¢–µ–≥"
        verbose_name_plural = "–¢–µ–≥–∏"

    def __str__(self):
        return self.name


class Article(models.Model):
    """–û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–æ–≤–æ—Å—Ç–µ–π"""

    SECTION_CHOICES = [
        ('main', '–û—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏'),
        ('foreign', '–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–∞—è –ø—Ä–µ—Å—Å–∞'),
    ]

    title = models.CharField(max_length=255, verbose_name="–ó–∞–≥–æ–ª–æ–≤–æ–∫")
    slug = models.SlugField(unique=True, verbose_name="URL (slug)")
    anons = models.TextField(blank=True, null=True, verbose_name="–ê–Ω–æ–Ω—Å")
    content = RichTextUploadingField(verbose_name="–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ")
    pub_date = models.DateTimeField(default=timezone.now, verbose_name="–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")

    image = models.ImageField(upload_to=safe_image_upload_to, blank=True, null=True, verbose_name="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Ñ–∞–π–ª)")
    image_url = models.URLField(blank=True, null=True, help_text="–î–æ–±–∞–≤—å—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", verbose_name="URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

    section = models.CharField(max_length=50, choices=SECTION_CHOICES, default='main', verbose_name="–¢–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")

    views = models.PositiveIntegerField(default=0)

    tags = TaggableManager(blank=True)  # —Ç–µ–≥–∏

    category = models.ForeignKey('Category', on_delete=models.SET_NULL, null=True, blank=True,
                                     related_name='articles', verbose_name="–†–∞–∑–¥–µ–ª —Å–ø–æ—Ä—Ç–∞")

    telegram_embed = models.TextField(blank=True, null=True, help_text="–ö–æ–¥ embed –∏–∑ Telegram", verbose_name="Embed –∏–∑ Telegram")
    is_main = models.BooleanField(default=False, verbose_name="–ì–ª–∞–≤–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å")

    source_name = models.CharField(max_length=100, blank=True, null=True)  # <-- –¥–æ–±–∞–≤–ª—è–µ–º
    source_url = models.URLField(blank=True, null=True)  # —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª (–ø–æ –∂–µ–ª–∞–Ω–∏—é)


    class Meta:
        ordering = ['-pub_date']
        verbose_name = "–ù–æ–≤–æ—Å—Ç—å"
        verbose_name_plural = "–ù–æ–≤–æ—Å—Ç–∏"

    def __str__(self):
        return self.title

    def save(self, *args, **kwargs):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è slug –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏ –æ—á–∏—Å—Ç–∫–∞ –∞–Ω–æ–Ω—Å–∞ –æ—Ç HTML."""
        if not self.slug:
            self.slug = slugify(self.title)
        if self.anons:
            self.anons = strip_tags(self.anons).strip()
        super().save(*args, **kwargs)

    def get_absolute_url(self):
        """–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–æ–≤–æ—Å—Ç–∏"""
        return reverse('news:article_detail', kwargs={'slug': self.slug})


# =======================
# üí¨ –ú–æ–¥–µ–ª—å –ª–∞–π–∫–æ–≤ –∏ –¥–∏–∑–ª–∞–π–∫–æ–≤
# =======================
class ArticleReaction(models.Model):
    """–†–µ–∞–∫—Ü–∏–∏ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏: –ª–∞–π–∫ / –¥–∏–∑–ª–∞–π–∫ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –Ω–∞–∫—Ä—É—Ç–∫–∏ –ø–æ IP"""
    article = models.ForeignKey('Article', on_delete=models.CASCADE, related_name='reactions', verbose_name="–ù–æ–≤–æ—Å—Ç—å")
    ip_address = models.GenericIPAddressField(verbose_name="IP-–∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    is_like = models.BooleanField(verbose_name="–õ–∞–π–∫?", help_text="True ‚Äî –ª–∞–π–∫, False ‚Äî –¥–∏–∑–ª–∞–π–∫")
    created_at = models.DateTimeField(default=timezone.now, verbose_name="–î–∞—Ç–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è")

    class Meta:
        unique_together = ('article', 'ip_address')  # –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        verbose_name = "–†–µ–∞–∫—Ü–∏—è –Ω–∞ –Ω–æ–≤–æ—Å—Ç—å"
        verbose_name_plural = "–†–µ–∞–∫—Ü–∏–∏ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏"

    def __str__(self):
        return f"{'üëç' if self.is_like else 'üëé'} - {self.article.title}"
